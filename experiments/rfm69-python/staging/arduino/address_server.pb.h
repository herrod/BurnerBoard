/* Automatically generated nanopb header */
/* Generated by nanopb-0.3.2-dev at Mon Jan 19 15:55:09 2015. */

#ifndef PB_ADDRESS_SERVER_PB_H_INCLUDED
#define PB_ADDRESS_SERVER_PB_H_INCLUDED
#include "pb.h"

//
// #include <pb.h>
//

#if PB_PROTO_HEADER_VERSION != 30
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Enum definitions */
typedef enum _address_server_message_message_type {
    address_server_message_message_type_DISCOVER = 0,
    address_server_message_message_type_OFFER = 1,
    address_server_message_message_type_REQUEST = 2,
    address_server_message_message_type_ACK = 3,
    address_server_message_message_type_NACK = 4
} address_server_message_message_type;

/* Struct definitions */
typedef struct _address_server_message {
    bool has_uid;
    char uid[8];
    bool has_type;
    address_server_message_message_type type;
    bool has_network;
    uint32_t network;
    bool has_offered_address;
    uint32_t offered_address;
    bool has_ttl;
    uint32_t ttl;
    bool has_ident;
    uint32_t ident;
} address_server_message;

/* Default values for struct fields */
extern const uint32_t address_server_message_network_default;

/* Initializer values for message structs */
#define address_server_message_init_default      {false, "", false, (address_server_message_message_type)0, false, 1u, false, 0, false, 0, false, 0}
#define address_server_message_init_zero         {false, "", false, (address_server_message_message_type)0, false, 0, false, 0, false, 0, false, 0}

/* Field tags (for use in manual encoding/decoding) */
#define address_server_message_uid_tag           1
#define address_server_message_type_tag          2
#define address_server_message_network_tag       3
#define address_server_message_offered_address_tag 4
#define address_server_message_ttl_tag           5
#define address_server_message_ident_tag         6

/* Struct field encoding specification for nanopb */
extern const pb_field_t address_server_message_fields[7];

/* Maximum encoded size of messages (where known) */
#define address_server_message_size              40

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
